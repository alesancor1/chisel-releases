#!/bin/bash
set -euo pipefail

DEBUG=${DEBUG:-0}

function log {
    if [ "$DEBUG" -eq 1 ]; then
        echo "[$(date --iso-8601=seconds)] $*" >&2
    fi
}

if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <committed_slices> <installed_slices>" >&2
    exit 1
fi

# filter out empty lines and then use comm
function intersection {
    comm -12 <(echo "$1" | tr ' ' '\n' | sort -u) <(echo "$2" | tr ' ' '\n' | sort -u) || true
}

function difference {
    comm -23 <(echo "$1" | tr ' ' '\n' | sort -u) <(echo "$2" | tr ' ' '\n' | sort -u) || true
}

# Convert to sorted, unique lines
committed=$(echo "$1" | tr ' ' '\n' | sort -u)
installed=$(echo "$2" | tr ' ' '\n' | sort -u)

# Compare slices
present=$(intersection "$committed" "$installed")
missing=$(difference "$committed" "$installed")

log "present ($(echo "$present" | wc -l)): $(echo "$present" | tr '\n' ' ')"
log "missing ($(echo "$missing" | wc -l)): $(echo "$missing" | tr '\n' ' ')"

total_committed=$(echo "$committed" | wc -l)
total_present=$(echo "$present" | wc -l)
coverage_percent=$(awk "BEGIN {printf \"%.2f\", ($total_present / $total_committed) * 100}")
log "coverage_percent: $coverage_percent"

# Build per-package stats
tests_json="{}"
all_packages=$(echo "$committed" | awk -F_ '{print $1}' | sort -u)
log "All packages: $(echo "$all_packages" | tr '\n' ' ')"

for pkg in $all_packages; do
    committed_pkg=$(echo "$committed" | grep "^${pkg}_" || true)
    installed_pkg=$(echo "$installed" | grep "^${pkg}_" || true)

    total_pkg_committed=$(echo "$committed_pkg" | wc -l)
    total_pkg_present=$( intersection "$committed_pkg" "$installed_pkg" | wc -l)

    if [ "$total_pkg_committed" -eq 0 ]; then
        pkg_coverage=0
    else
        pkg_coverage=$(awk "BEGIN {printf \"%.2f\", ($total_pkg_present / $total_pkg_committed) * 100}")
    fi

    missing_pkg=$(difference "$committed_pkg" "$installed_pkg")

    if [ -n "$missing_pkg" ]; then
        missing_json=$(echo "$missing_pkg" | jq -R . | jq -s .)
    else
        missing_json="[]"
    fi

    if [ "$pkg_coverage" != "100.00" ]; then
        log "Package $pkg: coverage $pkg_coverage%, missing ($(echo "$missing_pkg" | wc -l)): $(echo "$missing_pkg" | tr '\n' ' ')"
    else
        log "Package $pkg: coverage $pkg_coverage%"
    fi

    tests_json=$(jq --arg pkg "$pkg" \
        --argjson coverage "$pkg_coverage" \
        --argjson missing "$missing_json" \
        '. + {($pkg): {coverage: $coverage, missing: $missing}}' \
        <<<"$tests_json")

done

jq --monochrome-output -n \
    --argjson total_coverage "$coverage_percent" \
    --argjson tests "$tests_json" \
    '{total_coverage: $total_coverage, tests: $tests}'