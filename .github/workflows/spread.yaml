name: Spread
run-name: Spread for ${{ github.ref }}

on:
  workflow_call:

env:
  MANIFESTS_EXPORT_DIR: manifests

jobs:
  spread-tests:
    outputs:
      slices_files: ${{ steps.changed-slices.outputs.slices_files }}
    strategy:
      matrix:
        runner:
          - name: X64
            runs-on: ${{ github.repository_owner == 'canonical' && fromJSON('["noble", "X64", "large"]') || 'ubuntu-24.04' }}
          - name: ARM64
            runs-on: ${{ github.repository_owner == 'canonical' && fromJSON('["noble", "ARM64", "large"]') || 'ubuntu-24.04-arm' }}
    name: Run Spread tests | ${{ matrix.runner.name }}
    runs-on: ${{ matrix.runner.runs-on }}
    steps:
      - uses: actions/checkout@v4

      - name: Check changed paths
        id: changed-slices
        uses: dorny/paths-filter@v3
        with:
          filters: |
            slices:
              - added|modified: 'slices/**/*.yaml'
          list-files: shell

      - name: Check changed test directories
        uses: tj-actions/changed-files@531f5f7d163941f0c1c04e0ff4d8bb243ac4366f
        id: changed-tests
        with:
          separator: " "
          dir_names: "true"
          files: |
            tests/spread/integration/**

      - uses: actions/checkout@v4
        with:
          repository: snapcore/spread
          path: _spread

      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.17.0'

      - name: Install LXD
        uses: canonical/setup-lxd@v0.1.1
        with:
            channel: 5.21/stable

      - name: Prepare Spread suites
        id: spread-suites
        env:
          integration-tests: "tests/spread/integration"
          backend: "lxd"
        run: |
          set -ex
          spread_tasks=""
          for file in ${{ steps.changed-slices.outputs.slices_files }} ${{ steps.changed-tests.outputs.all_changed_files }}
          do
            pkg_name=$(basename $file | sed 's/\.yaml//g')
            pkg_tests="${{ env.integration-tests }}/${pkg_name}"
            if [ -f "${pkg_tests}/task.yaml" ] && [[ $spread_tasks != *"${pkg_tests}"* ]]
            then
              spread_tasks="${spread_tasks} ${{ env.backend }}:${pkg_tests}"
            fi
          done

          echo "run-tasks=$(echo ${spread_tasks} | awk '{$1=$1};1')" >> $GITHUB_OUTPUT

      - name: Build and run spread
        id: run-spread
        if: ${{ steps.spread-suites.outputs.run-tasks }}
        run: |
          (cd _spread/cmd/spread && go build)
          _spread/cmd/spread/spread -v ${{ steps.spread-suites.outputs.run-tasks }}

      - name: Upload manifests
        if: ${{ steps.run-spread.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: manifests_${{ matrix.runner.name }}
          path: ~/${{ env.MANIFESTS_EXPORT_DIR }}/**/*.wall
          overwrite: true

  test-coverage:
    name: Test Coverage | ${{ matrix.runner.name }}
    runs-on: ubuntu-latest
    needs: [ spread-tests ]
    strategy:
      matrix:
        runner:
          - name: X64
          # - name: ARM64
    env:
      main-branch-path: files-from-main
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          path: ${{ env.main-branch-path }}

      - name: Download manifests
        uses: actions/download-artifact@v4
        with:
          name: manifests_${{ matrix.runner.name }}

      - name: List committed slices
        id: list-committed-slices
        run: |
          list=""
          for file in ${{ needs.spread-tests.outputs.slices_files }}
          do
            slices=$(yq '... comments=""' $file | yq '.package as $pkg | .slices | keys | map("\($pkg)_\(.)") |  join(" ")')
            list="$list $slices"
          done

          echo "committed-slices=$list" >> $GITHUB_OUTPUT
      
      - name: List installed slices
        id: list-installed-slices
        run: |
          set -x

          list=""
          for file in $(find "${{ env.MANIFESTS_EXPORT_DIR }}/" -type f); do
            slices=$(zstdcat $file | jq -r '. | select(.kind=="slice") | .name' | xargs)
            list="$list $slices"
          done

          echo "installed-slices=$list" >> $GITHUB_OUTPUT

      - name: Create json coverage report
        id: json-coverage-report
        env:
          script-dir: "${{ env.main-branch-path }}/.github/scripts/test-coverage"
        run: |
          set -ex
          ./${{ env.script-dir }}/coverage-report \
            "${{ steps.list-committed-slices.outputs.committed-slices }}" \
            "${{ steps.list-installed-slices.outputs.installed-slices }}" \
            > coverage-report.json

      - name: Create markdown comment
        id: md-summary
        run: |
          set -x

          json=$(cat coverage-report.json)

          msg_file="${msg_file:-$(mktemp)}"
          echo "msg_file=$msg_file" >> $GITHUB_OUTPUT

          total=$(echo "$json" | jq '.total_coverage')
          echo "### ✅ Coverage Report" > $msg_file
          echo "- Total Coverage: ${total}%" >> $msg_file
          echo "- Per Package:" >> $msg_file

          echo "$json" | jq -r '.tests | to_entries[] | "\(.key) \(.value.coverage) \(.value.missing | length) \(.value.missing | join(","))"' | while read pkg coverage count missing; do
            if [ "$count" -eq 0 ]; then
              echo "  - \`$pkg\`: ✅ ${coverage}% (0 missing)" >> $msg_file
            else
              echo "  - \`$pkg\`: ❌ ${coverage}% (${count} missing)" >> $msg_file
              IFS=',' read -ra items <<< "$missing"
              for item in "${items[@]}"; do
                echo "    - \`$(echo "$item" | xargs)\`" >> $msg_file
              done
            fi
          done

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report.json
          path: coverage-report.json

      - name: Post comment to PR
        uses: mshick/add-pr-comment@v2
        with:
          message-path: ${{ steps.md-summary.outputs.msg_file }}
          message-id: coverage-summary
